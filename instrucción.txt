## Instrucciones para Configurar la Aplicación en un Servidor Nginx en Debian 12

Este documento proporciona instrucciones detalladas para instalar y configurar las dependencias necesarias para ejecutar la aplicación Session en un servidor Nginx en Debian 12.

### 1. Instalación de Dependencias

1. **Actualizar el Sistema:**
   ```bash
   sudo apt update && sudo apt upgrade -y
   ```

2. **Instalar Python 3 y pip:**
   ```bash
   sudo apt install python3 python3-pip -y
   ```

3. **Instalar Flask:**
   ```bash
   pip3 install flask gunicorn
   ```

4. **Instalar Nginx:**
   ```bash
   sudo apt install nginx -y
   ```

### 2. Configuración del Servidor Nginx

1. **Crear un Archivo de Configuración para Nginx:**
   - Crear un archivo de configuración en `/etc/nginx/sites-available/session_app` con el siguiente contenido:
     ```
     server {
         listen 80;
         server_name localhost;
         listen 443 ssl;
         ssl_certificate /etc/ssl/certs/your_cert.pem;
         ssl_certificate_key /etc/ssl/private/your_key.pem;

         location / {
             proxy_pass http://127.0.0.1:5000;
             proxy_set_header Host $host;
             proxy_set_header X-Real-IP $remote_addr;
             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
             proxy_set_header X-Forwarded-Proto $scheme;
         }
     }

     # Redirect HTTP to HTTPS
     server {
         listen 80;
         server_name localhost;
         return 301 https://$host$request_uri;
     }
     ```

2. **Habilitar la Configuración:**
   ```bash
   sudo ln -s /etc/nginx/sites-available/session_app /etc/nginx/sites-enabled/
   ```

3. **Reiniciar Nginx:**
   ```bash
   sudo systemctl restart nginx
   ```

### 3. Colocación del ID de Usuario y Contraseña

- El ID de usuario y la contraseña generados por la aplicación deben colocarse en un archivo seguro en el servidor. Se recomienda almacenarlos en un archivo de texto en el directorio `/etc/session_app/credentials.txt`. Asegúrese de que este archivo tenga permisos adecuados para proteger la información sensible.

### 4. Configuración Final

- Asegúrese de que el archivo `servidor.py` esté ubicado fuera de la carpeta `app` y que sea ejecutable:
  ```bash
  chmod +x servidor.py
  ```

- Ejecute el archivo `servidor.py` para iniciar la aplicación:
  ```bash
  gunicorn --certfile=/etc/ssl/certs/your_cert.pem --keyfile=/etc/ssl/private/your_key.pem -b 127.0.0.1:5000 servidor:app
  ```

### 5. Verificación

- Acceda a `http://localhost` en su navegador para verificar que la aplicación esté funcionando correctamente.
- Asegúrese de que Nginx esté redirigiendo correctamente las solicitudes al servidor Flask.

Con estos pasos, su aplicación debería estar configurada y funcionando en un servidor Nginx en Debian 12.

## Instrucciones para Configurar la Aplicación en un Servidor Nginx en Debian 12

Este documento proporciona instrucciones detalladas para instalar y configurar las dependencias necesarias para ejecutar la aplicación Session en un servidor Nginx en Debian 12.

### 1. Instalación de Dependencias

1. **Actualizar el Sistema:**
   ```bash
   sudo apt update && sudo apt upgrade -y
   ```

2. **Instalar Python 3 y pip:**
   ```bash
   sudo apt install python3 python3-pip -y
   ```

3. **Instalar Flask:**
   ```bash
   pip3 install flask gunicorn
   ```

4. **Instalar Nginx:**
   ```bash
   sudo apt install nginx -y
   ```

### 2. Configuración del Servidor Nginx

1. **Crear un Archivo de Configuración para Nginx:**
   - Crear un archivo de configuración en `/etc/nginx/sites-available/session_app` con el siguiente contenido:
     ```
     server {
         listen 80;
         server_name localhost;

         location / {
             proxy_pass http://127.0.0.1:5000;
             proxy_set_header Host $host;
             proxy_set_header X-Real-IP $remote_addr;
             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
             proxy_set_header X-Forwarded-Proto $scheme;
         }
     }
     ```

2. **Habilitar la Configuración:**
   ```bash
   sudo ln -s /etc/nginx/sites-available/session_app /etc/nginx/sites-enabled/
   ```

3. **Reiniciar Nginx:**
   ```bash
   sudo systemctl restart nginx
   ```

### 3. Colocación del ID de Usuario y Contraseña

- El ID de usuario y la contraseña generados por la aplicación deben colocarse en un archivo seguro en el servidor. Se recomienda almacenarlos en un archivo de texto en el directorio `/etc/session_app/credentials.txt`. Asegúrese de que este archivo tenga permisos adecuados para proteger la información sensible.

### 4. Configuración Final

- Asegúrese de que el archivo `servidor.py` esté ubicado fuera de la carpeta `app` y que sea ejecutable:
  ```bash
  chmod +x servidor.py
  ```

- Ejecute el archivo `servidor.py` para iniciar la aplicación:
  ```bash
  gunicorn --certfile=/etc/ssl/certs/your_cert.pem --keyfile=/etc/ssl/private/your_key.pem -b 127.0.0.1:5000 servidor:app
  ```

### 5. Verificación

- Acceda a `http://localhost` en su navegador para verificar que la aplicación esté funcionando correctamente.
- Asegúrese de que Nginx esté redirigiendo correctamente las solicitudes al servidor Flask.

Con estos pasos, su aplicación debería estar configurada y funcionando en un servidor Nginx en Debian 12.## Instrucciones para Configurar la Aplicación en un Servidor Nginx en Debian 12

Este documento proporciona instrucciones detalladas para instalar y configurar las dependencias necesarias para ejecutar la aplicación Session en un servidor Nginx en Debian 12.

### 1. Instalación de Dependencias

1. **Actualizar el Sistema:**
   ```bash
   sudo apt update && sudo apt upgrade -y
   ```

2. **Instalar Python 3 y pip:**
   ```bash
   sudo apt install python3 python3-pip -y
   ```

3. **Instalar Flask y Gunicorn:**
   ```bash
   pip3 install flask gunicorn
   ```

4. **Instalar Nginx:**
   ```bash
   sudo apt install nginx -y
   ```

### 2. Configuración del Servidor Nginx

1. **Crear un Archivo de Configuración para Nginx:**
   - Crear un archivo de configuración en `/etc/nginx/sites-available/session_app` con el siguiente contenido:
     ```
     server {
         listen 80;
         server_name localhost;
         listen 443 ssl;
         ssl_certificate /etc/ssl/certs/your_cert.pem;
         ssl_certificate_key /etc/ssl/private/your_key.pem;

         location / {
             proxy_pass http://127.0.0.1:5000;
             proxy_set_header Host $host;
             proxy_set_header X-Real-IP $remote_addr;
             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
             proxy_set_header X-Forwarded-Proto $scheme;
         }
     }

     # Redirect HTTP to HTTPS
     server {
         listen 80;
         server_name localhost;
         return 301 https://$host$request_uri;
     }
     ```

2. **Habilitar la Configuración:**
   ```bash
   sudo ln -s /etc/nginx/sites-available/session_app /etc/nginx/sites-enabled/
   ```

3. **Reiniciar Nginx:**
   ```bash
   sudo systemctl restart nginx
   ```

### 3. Colocación del ID de Usuario y Contraseña

- El ID de usuario y la contraseña generados por la aplicación deben colocarse en un archivo seguro en el servidor. Se recomienda almacenarlos en un archivo de texto en el directorio `/etc/session_app/credentials.txt`. Asegúrese de que este archivo tenga permisos adecuados para proteger la información sensible.

### 4. Configuración Final

- Asegúrese de que el archivo `servidor.py` esté ubicado fuera de la carpeta `app` y que sea ejecutable:
  ```bash
  chmod +x servidor.py
  ```

- Ejecute el archivo `servidor.py` para iniciar la aplicación:
  ```bash
  gunicorn --certfile=/etc/ssl/certs/your_cert.pem --keyfile=/etc/ssl/private/your_key.pem -b 127.0.0.1:5000 servidor:app
  ```

### 5. Verificación

- Acceda a `http://localhost` en su navegador para verificar que la aplicación esté funcionando correctamente.
- Asegúrese de que Nginx esté redirigiendo correctamente las solicitudes al servidor Flask.

Con estos pasos, su aplicación debería estar configurada y funcionando en un servidor Nginx en Debian 12.
